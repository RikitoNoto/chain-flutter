// Mocks generated by Mockito 5.4.2 from annotations
// in chain_flutter/test/controllers/login_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:chain_flutter/repositories/api_repository.dart' as _i4;
import 'package:chain_flutter/values/token.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:riverpod/src/framework.dart' as _i3;
import 'package:riverpod/src/internals.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeToken_0 extends _i1.SmartFake implements _i2.Token {
  _FakeToken_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderContainer_1 extends _i1.SmartFake
    implements _i3.ProviderContainer {
  _FakeProviderContainer_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_2<State1> extends _i1.SmartFake
    implements _i3.ProviderSubscription<State1> {
  _FakeProviderSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiRepository extends _i1.Mock implements _i4.ApiRepository {
  @override
  _i5.Future<_i2.Token> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<_i2.Token>.value(_FakeToken_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Token>.value(_FakeToken_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i5.Future<_i2.Token>);
}

/// A class which mocks [ProviderRef].
///
/// See the documentation for Mockito's code generation for more information.
class MockProviderRef<State> extends _i1.Mock
    implements _i6.ProviderRef<State> {
  @override
  State get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.dummyValue<State>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i7.dummyValue<State>(
          this,
          Invocation.getter(#state),
        ),
      ) as State);
  @override
  set state(State? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_1(
          this,
          Invocation.getter(#container),
        ),
        returnValueForMissingStub: _FakeProviderContainer_1(
          this,
          Invocation.getter(#container),
        ),
      ) as _i3.ProviderContainer);
  @override
  T refresh<T>(_i3.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);
  @override
  void invalidate(_i3.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );
  @override
  T read<T>(_i3.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);
  @override
  bool exists(_i3.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  T watch<T>(_i3.AlwaysAliveProviderListenable<T>? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);
  @override
  _i3.ProviderSubscription<T> listen<T>(
    _i3.AlwaysAliveProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_2<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
        returnValueForMissingStub: _FakeProviderSubscription_2<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i3.ProviderSubscription<T>);
}

/// A class which mocks [Token].
///
/// See the documentation for Mockito's code generation for more information.
class MockToken extends _i1.Mock implements _i2.Token {
  @override
  String get access => (super.noSuchMethod(
        Invocation.getter(#access),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get refresh => (super.noSuchMethod(
        Invocation.getter(#refresh),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}
